#!/usr/bin/env node
process.env.DEBUG = "editor_with_notice:*"
/**
 * Module dependencies.
 */

var app = require('../app');
var wsApp = require('../ws-app');

var debug = require('debug')('editor_with_notice:server');
var http = require('http');
var child_process = require('child_process');

var storage = require('../lib/storage');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '37001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
wsApp.handle(server);

function start_python_service() {
    var cp = child_process.exec('python ' + path.join(__dirname, '../jieba_service/jieba_service.py'), {});
    cp.on('error', function (e) {
        debug(e);
    });
    cp.on('exit', function ( code ) {
        debug('python cp exit', code);

        process.exit(0);
    });

    cp.stdout.pipe(process.stdout);
    cp.stderr.pipe(process.stderr);

    process.on('beforeExit', function () {
        cp.kill('SIGINT');
    })
}


process.on('SIGINT', function () {
  debug('yes  ctrl+c');
  process.exit(0);
});

/**
 * Listen on provided port, on all network interfaces.
 */
storage.ready.then(function () {
  debug('db get ready');

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}, function ( e ) {
  debug('db connect failed', e );
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  start_python_service();
}
